#!/usr/bin/env ruby

# This helper lets you setup a consistent, barebones project structure for each AoC challenge.
# It creates basic files if they don't exist in /this/directory/yyyy/dd/*.*
# Finally, it shows the links to the challenge page, and the first challenge file,
#   which lets you click straight into your editor.
#
# Files created are based on my personal workflow. Feel free to modify this script to match your own!
#   1.rb
#   input.rb
#
# Installation:
#   Add this script to the directory you want as your root AoC directory.
#   I use `/Users/ttilberg/dev/advent-of-code` for example.
#   You can now run it with `./aoc`.
#   To get easier, global access to the script you can add it to your path:
#     `ln -s $PWD/aoc <somewhere/on/your/path/aoc>`
#
#   For example, I keep `~/bin/` on my path:
#     `ln -s $PWD/aoc $HOME/bin/aoc`
#

require "fileutils"
require "date"
require "json"

module AoC
  class Path
    class ParseError < StandardError; end

    attr_reader :year, :day

    def year=(val)
      year = val.to_i
      year += 2000 if year < 100
      unless (2015..2050).include? year
        raise ParseError, "Year must be between 2015 and 2050. Received: `#{val}`, parsed to: `#{year}`"
      end

      @year = year
    end

    def day=(val)
      day = val.to_i
      unless (1..25).include? day
        raise ParseError, "Day must be between 1 and 25. Received: `#{val}`, parsed to: `#{day}`"
      end
      @day = day
    end

    def url
      "https://adventofcode.com/#{year}/day/#{day}"
    end

    def dir
      "#{__dir__}/#{year}/#{day.to_s.rjust(2, "0")}"
    end

    def to_h
      {
        year:,
        day:,
        url:,
        dir:,
      }
    end

    def input_url
      "#{url}/input"
    end

    def input
      session = File.read('session.txt')
      raise if session.nil? || session.empty?
      $stderr.puts "Attempting to download puzzle input from #{input_url}..."
      `curl --silent --cookie "session=#{session}" #{input_url}`
    rescue
      <<~TXT
        You can get the puzzle input from:
        #{input_url}

        If you save your session cookie value as
          `#{__dir__}/session.txt`
        it will be downloaded for you.
      TXT
    end
  end
end

options = AoC::Path.new

case ARGV.to_a
in ["--help" | "help" | "-h" | "h"]
  puts <<~HELP
    ðŸŽ„ ðŸŽ„ ðŸŽ„ ðŸŽ„ ðŸŽ„ ðŸŽ„ ðŸŽ„ ðŸŽ„ ðŸŽ„ ðŸŽ„ ðŸŽ„ ðŸŽ„ ðŸŽ„ ðŸŽ„ ðŸŽ„ ðŸŽ„ ðŸŽ„ ðŸŽ„ ðŸŽ„ ðŸŽ„
    
    This AoC helper sets up your project for the given challenge.

    Running `aoc` with no arguments creates a challenge for the current date.

    You can pass in a year and date, or a url to create a challenge for a different day.

    Examples:
      aoc
      aoc 2022 2
      aoc 22 2
      aoc 2022 02
      aoc https://adventofcode.com/2022/day/2

    ðŸŽ„ ðŸŽ„ ðŸŽ„ ðŸŽ„ ðŸŽ„ ðŸŽ„ ðŸŽ„ ðŸŽ„ ðŸŽ„ ðŸŽ„ ðŸŽ„ ðŸŽ„ ðŸŽ„ ðŸŽ„ ðŸŽ„ ðŸŽ„ ðŸŽ„ ðŸŽ„ ðŸŽ„ ðŸŽ„

  HELP
  exit 0
in [/\d{2,4}/ => year, /\d{1,2}/ => day]
  # Accept:
  #   yyyy dd
  #   yy d

  options.year = year
  options.day = day
in [%r{(\d{2,4})/(?:day/)?(\d{1,2})}]
  # Accept:
  #   2022/01
  #   22/1
  #   https://adventofcode.com/2022/day/1

  options.year = $1
  options.day = $2
else
  today = DateTime.now.new_offset("-05:00")
  puts "No arguments given, using today's date: #{today} to create AoC"
  
  options.year = today.year
  options.day = today.day
end

FileUtils.mkdir_p options.dir
File.write("#{options.dir}/input.txt", options.input)
FileUtils.touch "#{options.dir}/1.rb"

puts <<~BANNER

  ðŸŽ„ ðŸŽ„ ðŸŽ„ ðŸŽ„ ðŸŽ„ ðŸŽ„ ðŸŽ„ ðŸŽ„ ðŸŽ„ ðŸŽ„ ðŸŽ„ ðŸŽ„ ðŸŽ„ ðŸŽ„

     #{options.url}

     Ready to hack at:
       #{options.dir}/1.rb


  ðŸŽ„ ðŸŽ„ ðŸŽ„ ðŸŽ„ ðŸŽ„ ðŸŽ„ ðŸŽ„ ðŸŽ„ ðŸŽ„ ðŸŽ„ ðŸŽ„ ðŸŽ„ ðŸŽ„ ðŸŽ„
BANNER

`subl #{__dir__} #{} "#{options.dir}/input.txt" "#{options.dir}/1.rb"`
